<?php
/**
 * Desc  ：menu.php  RBAC菜单权限管理
 * Author: Cool-T 😀
 * Since : V1.0
 * Date  : 2018/10/18
 */

namespace app\admin\controller;

use app\admin\model\AdminMenu;
use app\admin\model\BgAnimate;
use app\admin\model\RoleAdminMenu;
use think\Db;
use think\db\Where;
use think\facade\Request;


class Menu extends Base
{
    private $model;

    /**
     * 初始化
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->model = new AdminMenu();
    }

    /**
     * 列表
     * @return mixed
     * @throws \think\exception\DbException
     */
    public function index()
    {
        //where条件
        $where = new Where();
        $parent_id = input( 'id', 0 );
        $where['parent_id'] = $parent_id;
        if( isset( $_GET['name'] ) && $_GET['name'] ) $where['name'] = [ 'like', "%{$_GET['name']}%" ];
        if( isset( $_GET['path'] ) && $_GET['path'] ) $where['path'] = [ 'like', "%{$_GET['path']}%" ];

        //查询菜单
        $list = AdminMenu::getList( $where, [ 'sort' => 'asc', 'id' => 'asc' ] );
        $this->assign( [
            'list' => $list,
            'parent_id' => $parent_id
        ] );
        return $this->fetch();
    }

    /**
     * 添加菜单
     * @return mixed|\think\response\Json
     */
    public function add()
    {
        if( Request::isAjax() ){

            $_POST['path'] = $_POST['module'].'/'.$_POST['controller'].'/'.$_POST['action'];

            //验证
            $errMsg = $this->validateData('Menu', $_POST );
            if( $errMsg ) return $errMsg;

            //添加
            Db::startTrans();
            try{

                $this->model->allowField(true)->save( $_POST );

                $data = [
                    'role_id'   =>  $this->superAdminId,
                    'permission_id' =>  $this->model->id
                ];

                RoleAdminMenu::insert( $data );

                Db::commit();

                $this->endAction( true, '添加菜单' );

            }catch ( \Exception $e ){
                Db::rollback();
                $this->endAction( false, false, $e->getMessage() );
            }

        }else{
            //顶级菜单
            $menuSelect = AdminMenu::getSelect( [ 'parent_id' => 0 ], [ 'sort' => 'asc' ], 'id,name' );

            $this->assign( 'menuSelect', $menuSelect );
            return $this->fetch();
        }
    }

    /**
     * 编辑菜单
     * @return array|bool|\think\response\View
     */
    public function edit()
    {
        if( Request::isAjax() ){

            $_POST['path'] = $_POST['module'].'/'.$_POST['controller'].'/'.$_POST['action'];

            //验证
            $errMsg = $this->validateData('Menu', $_POST );
            if( $errMsg ) return $errMsg;

            //修改数据
            $status = $this->model->allowField(true)->save( $_POST, [ 'id' => $_POST['id'] ] );
            $this->endAction( $status, '修改菜单' );

        }else{
            //当前操作菜单
            $id = input( 'id' );
            $data = $this->model->get( $id );
            if( !$data ) abort( 404, '页面不存在' );

            $data['path'] = explode( '/', $data['path'] );
            $this->assign( 'data', $data );

            //顶级菜单
            $menuSelect = AdminMenu::getSelect( [ 'parent_id' => 0 ], [ 'sort' => 'asc' ], 'id,name' );
            $this->assign( 'menuSelect', $menuSelect );

            //获取子菜单数量
            $sonCount = AdminMenu::whereCount( [ 'parent_id' => $id ] );
            $this->assign( 'sonCount', $sonCount );

            return $this->fetch();
        }
    }

    /**
     * 删除菜单
     */
    public function del()
    {
        $id = input( 'id' );
        if( !Request::isAjax() || !$id ) return abort( 404, '页面不存在' );

        $sonCount = AdminMenu::whereCount( [ 'parent_id' => $id ] );
        if( $sonCount > 0 ) {
            $this->endAction( false, false, '菜单下有' . $sonCount . '个子菜单，请删除子菜单后再删除' );
        }

        Db::startTrans();
        try{
            AdminMenu::destroy( $id );
            RoleAdminMenu::where( [ 'permission_id' => $id ] )->delete();
            Db::commit();

            $this->endAction( true, '删除菜单' );

        }catch( \Exception $e ){
            Db::rollback();
            $this->endAction( false, false, $e->getMessage() );
        }
    }

    /**
     * 设置指定字段值
     */
    public function setField()
    {
        if( !Request::isAjax() ) abort( 404, '页面不存在' );

        //接收数据
        $id = input( 'id', '', 'trim' );
        $field = input( 'field', '', 'trim' );
        $value = input( 'value', '', 'trim' );

        switch ( $field ){
            //设置状态
            case 'status':
                        $status = AdminMenu::whereInSetField( 'id', $id, 'status', $value );
                break;
            //设置选中
            case 'checked':
                        $parent_id = input( 'parent_id' );
                        $path = AdminMenu::whereValue( [ 'id' => $id ], 'path' );
                        Db::startTrans();
                        try{
                            AdminMenu::whereSetField( 'id !='. $id . ' and parent_id ='. $parent_id, $field, 0 );
                            AdminMenu::whereSetField( 'id ='. $id . ' and parent_id ='. $parent_id, $field, 1 );
                            AdminMenu::whereSetField( [ 'id' => $parent_id ], 'path', $path );
                            Db::commit();
                            $status = true;
                        }catch ( \Exception $e ){
                            Db::rollback();
                            $status = false;
                        }
                break;
            //加载动画
            case 'animate_status':
                        $status = BgAnimate::whereInSetField( 'id', $id, 'animate_status', $value );
                break;
        }

        if( isset( $status ) ) $this->endAction( $status, '设置菜单状态' );
    }

}










