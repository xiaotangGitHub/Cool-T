<?php
/**
 * Desc  ：Role.php  RBAC角色管理
 * Author: Cool-T 😀
 * Since : V1.0
 * Date  : 2018/10/25
 */

namespace app\admin\controller;

use app\admin\model\AdminMenu;
use app\admin\model\AdminRole;
use app\admin\model\RoleAdmin;
use app\admin\model\RoleAdminMenu;
use think\Db;
use think\db\Where;
use think\facade\Request;

class Role extends Base
{
    private $model;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->model = new RoleAdmin();
    }

    /**
     * 查看
     * @return \think\response\View
     * @throws \think\exception\DbException
     */
    public function index()
    {
        $where = new Where();
        $id = input( 'id' );
        if( $id ){
            $where['ar.role_id'] = $id;
            $where['a.id'] = [ 'neq', 1 ];
            $list = AdminRole::getRoleList( $where );
            $this->assign( 'id', $id );
        }else{
            if( isset( $_GET['name'] ) && $_GET['name'] ) $where['name'] = [ 'like', "%{$_GET['name']}%" ];
            $list = RoleAdmin::getList( $where, [ 'create_time' => 'asc' ] );
        }

        $this->assign('list', $list);
        return $this->fetch();
    }

    /**
     * 添加
     * @return array|bool|\think\response\View
     */
    public function add()
    {
        if( Request::isAjax() ){

            $errMsg = $this->validateData( 'RoleAdmin', $_POST );
            if( $errMsg ) return $errMsg;

            $status = $this->model->save( $_POST );
            $this->endAction( $status, '添加管理员角色' );

        }else{
            return $this->fetch();
        }
    }

    /**
     * 修改
     * @return array|bool|\think\response\View
     */
    public function edit()
    {
        $id = input( 'id' );
        if( Request::isAjax() ){

            $errMsg = $this->validateData( 'RoleAdmin', $_POST );
            if( $errMsg ) return $errMsg;

            $status = $this->model->save( $_POST, [ 'id' => $id ] );
            $this->endAction( $status, '修改管理员角色' );

        }else{

            $data = RoleAdmin::whereFind( [ 'id' => $id ] );
            if( !$data ) abort( 404, '页面不存在' );

            $this->assign( 'data', $data );
            return $this->fetch();
        }
    }

    /**
     * 修改指定字段值
     */
    public function setField()
    {
        if( !Request::isAjax() ) abort( 404, '页面不存在' );

        $id = input( 'id' );
        $field = input( 'field' );
        $value = input( 'value' );

        $status = RoleAdmin::whereInSetField( 'id', $id, $field, $value );
        $this->endAction( $status, '设置管理员角色状态' );
    }

    /**
     * 删除
     */
    public function del()
    {
        $id = input( 'id' );
        if( !$id || !Request::isAjax() ) abort( 404, '页面不存在' );

        $count = AdminRole::whereInCount( 'role_id', $id );
        if( $count > 0 ){
            $this->endAction( false, false, '要删除的角色下绑定了'.$count.'位管理员，请解绑后删除' );
        }

        $status = RoleAdmin::destroy( $id );
        $this->endAction( $status, '删除管理员角色' );
    }

    /**
     * 角色权限设置
     * @return \think\response\View
     * @throws \Exception
     */
    public function permission()
    {
        if( Request::isAjax() ){
            //接收参数
            $id = input( 'id' );
            $data = input( 'data' );

            if( $data && count( $data ) > 0 ){
                //有勾选权限
                Db::startTrans();
                try{
                    RoleAdminMenu::where( [ 'role_id' => $id ] )->delete();
                    RoleAdminMenu::insertAll( $data );
                    Db::commit();
                    $this->endAction( true, '管理员角色权限设置' );
                }catch ( \Exception $e ){
                    Db::rollback();
                    $this->endAction( false, false, $e->getMessage() );
                }
            }else{
                //未勾选任何权限
                $status = RoleAdminMenu::whereDel( [ 'role_id' => $id ] );
                $this->endAction( $status, '管理员角色权限设置' );
            }

        }else{
            //获取已选中的菜单权限ID
            $id = input( 'id' );
            $permissionIds = RoleAdminMenu::whereColumn( [ 'role_id' => $id ], 'permission_id' );

            //获取菜单权限
            $menus = AdminMenu::getMenuTree();

            $this->assign([
                'id'    => $id,
                'menus' => $menus,
                'permissionIds' => $permissionIds
            ]);
            return $this->fetch();
        }
    }
}