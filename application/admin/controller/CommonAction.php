<?php
/**
 * Desc  ：CommonAction.php  公共操作 ===> 跳出权限验证
 * Author: Cool-T 😀
 * Since : V1.0
 * Date  : 2018/11/8
 */

namespace app\admin\controller;


use app\admin\model\Admin;
use app\admin\model\ImgsResource;
use app\admin\model\ImgsCategory;
use app\common\model\SystemConfig;
use Qiniu\Auth;
use Qiniu\Storage\UploadManager;
use think\Controller;
use think\Db;
use think\facade\Config;
use think\facade\Request;

class CommonAction extends Controller
{
    //管理员数据
    private $adminUser;
    //上传目录
    private $imgDir = 'uploads';

    /**
     * 初始化
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $status = validateAdmin();
        $status = is_array( $status ) ? $status : json_decode( $status, true );
        if( $status[ 'code' ] != 200 ){
            cookie( 'loginStatus', $status );
            $this->redirect( '/admin_login' );
        }else{
            $adminUser = getAdminInfo();
            $this->adminUser = Admin::whereFind( [ 'id' => $adminUser['id'] ] );
        }
    }

    /**
     * 上传图片
     * @return \think\response\Json
     * @throws \think\Exception
     * @throws \think\exception\PDOException
     */
    public function uploadImg()
    {
        //接收参数
        $file = Request::file( 'file' );
        if( !$file ) return json( [ 'code' => 403, 'msg' => '请上传图片' ] );
        $cid = input( 'cid', '', 'trim' );
        if( !$cid || $cid == 'undefined' ) return json( [ 'code' => 403, 'msg' => '请先选择文件夹' ] );

        //上传
        $info = $file->move( $this->imgDir );
        if( $info ){
            $data = [
                'imgs_cid'  =>  $cid,
                'path'      =>  $this->imgDir.'/'.date('Ymd').'/',
                'img'       =>  $info->getFilename(),
                'name'      =>  $info->getInfo()['name'],
                'size'      =>  $info->getInfo()['size'],
                'ext'       =>  $info->getExtension(),
                'addtime'   =>  time(),
            ];

            $status = ImgsResource::insertGetId( $data );

            if( $status ){

                $qiNiuConfig = Config::get( 'qiNiuConfig.' );
                $auth = new Auth( $qiNiuConfig['accessKey'], $qiNiuConfig['secretKey'] );
                $token = $auth->uploadToken( $qiNiuConfig['bucket'], $data['img'] );

                $upManager = new UploadManager();

                list($ret, $error) = $upManager->putFile( $token, $data['img'], $info->getRealPath() );
                if( $error !== null ){
                    ImgsCategory::where( 'id', $status )->delete();
                    return json( [ 'code' => 403, 'msg' => '七牛云存储失败' ] );
                }

                return json( [ 'code' => 200, 'msg' => '添加成功' ] );
            }else{
                return json( [ 'code' => 403, 'msg' => '添加失败' ] );
            }

        }else{
            return json( [ 'code' => 403, 'msg' => $file->getError() ] );
        }
    }

    /**
     * 新建图片库文件夹分类
     */
    public function addImgsCategory()
    {
        if( !Request::isAjax() ) abort( 404, '页面不存在' );
        $data = [
            'name'      => input( 'name', '未命名文件夹', 'trim' ),
            'admin_id'  => $this->adminUser['id']
        ];

        $insertId = ImgsCategory::insertGetId( $data );
        if( $insertId ){
            return json( [ 'code' => 200, 'msg' => '新建成功', 'id' => $insertId ] );
        }else{
            return json( [ 'code' => 403, 'msg' => '新建失败' ] );
        }
    }

    /**
     * 修改图片库文件夹分类
     */
    public function editImgsCategory()
    {
        if( !Request::isAjax() ) abort( 404, '页面不存在' );
        $data = [
            'name'      => input( 'name', '未命名文件夹', 'trim' ),
            'id'        => input( 'id' )
        ];
        $status = Db::name( 'imgs_category' )->update( $data );
        if( $status ){
            return json( [ 'code' => 200, 'msg' => '修改成功' ] );
        }else{
            return json( [ 'code' => 403, 'msg' => '修改失败' ] );
        }
    }

    /**
     * 删除图片库文件夹分类
     * @return \think\response\Json
     * @throws \think\Exception
     * @throws \think\exception\PDOException
     */
    public function delImgsCategory()
    {
        if( !Request::isAjax() ) abort( 404, '页面不存在' );
        $id = input( 'id' );
        $type = (int)input( 'type' );

        $status = ImgsCategory::where( [ 'id' => $id, 'admin_id' => $this->adminUser['id'] ] )->delete();
        if( $status ){

            if( $type == 1 ){
                //同时删除图片
                ImgsResource::whereSetField( [ 'imgs_cide' => $id ], 'del_status', 1 );
            }else{
                //移动文件夹下图片
                $moveId = ImgsCategory::whereValue( [ 'admin_id' => $this->adminUser['id'] ], 'id' );
                if( $moveId ){
                    ImgsResource::whereSetField( [ 'imgs_cid' => $id ], 'imgs_cid', $moveId );
                }else{
                    ImgsResource::whereSetField( [ 'imgs_cid' => $id ], 'del_status', 1 );
                }
            }

            return json( [ 'code' => 200, 'msg' => '删除成功' ] );

        }else{
            return json( [ 'code' => 403, 'msg' => '删除失败' ] );
        }
    }

    /**
     * 获取图片
     * @return \think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function getImgsResource()
    {
        if ( !Request::isAjax() ) abort( 404, '页面不存在' );

        $page = input( 'page', 1, 'trim' );
        $num = input( 'num', 15, 'trim' );
        $cid = input( 'cid', '', 'trim' );
        $where =  [ 'imgs_cid' => $cid, 'del_status' => 0 ];
        $data = ImgsResource::getImgsPage( $where, $page, $num );
        $count = ImgsResource::whereCount( $where );

        $qiNiuStatus = SystemConfig::whereValue( [ 'key' => 'qiNiuStatus' ], 'value' );
        if( $qiNiuStatus ){
            $imgDomain = Config::get( 'qiNiuConfig.domain' );
        }else{
            $imgDomain = Request::domain().'/';
        }

        return json( [ 'data' => $data, 'count' => $count, 'domain' => $imgDomain, 'qi_niu_status' => $qiNiuStatus ] );
    }

    /**
     * 移动图片
     * @return \think\response\Json
     */
    public function moveImgsResource()
    {
        if( !Request::isAjax() ) abort( 404, '页面不存在' );

        $ids = input( 'ids' );
        $cid = input( 'cid' );

        $status = ImgsResource::whereInSetField( 'id', $ids, 'imgs_cid', $cid );
        if( $status ){
            return json( [ 'code' => 200, 'msg' => '移动成功' ] );
        }else{
            return json( [ 'code' => 403, 'msg' => '移动失败' ] );
        }
    }

    /**
     * 删除图片
     * @return \think\response\Json
     */
    public function delImgsResource()
    {
        if( !Request::isAjax() ) abort( 404, '页面不存在' );

        $ids = input( 'ids' );

        $status = ImgsResource::whereInSetField( 'id', $ids, 'del_status', 1 );
        if( $status ){
            return json( [ 'code' => 200, 'msg' => '删除成功' ] );
        }else{
            return json( [ 'code' => 403, 'msg' => '删除失败' ] );
        }
    }
}
















